

optimize_local_csi_label.R <- function(m, nlev, ess = 1){
  
  q   <- nrow(m)
  r   <- ncol(m)
  npa <- length(nlev)
  
  conf <- expand.grid(lapply(nlev-1, seq.int, from = 0))
  stride  <- c(1, cumprod(nlev[-npa]))
  
  # init
  S  <- seq_len(q)
  uS <- S
  nS <- rep.int(1, q)
  L  <- new_label(npa)
  scores <- famscore_bdeu_byrow(m, ess, r, q)
  iter <- 0
  
  while (TRUE) {
    iter <- iter +1
    S_top <- S
    diff_top <- 0
    
    # find best row to collapse
    for (i in seq_len(npa)) {
      indx <- conf[, -i, drop = F]%*%stride[-i] +1  # enumerate configurations of sub-parents
      for (x in unique(indx)) {
        if (x %in% L[[i]]) next
        regions <- S[indx == x]           # regions collapsed by current context
        if (length(unique(regions)) == 1) next
        region  <- min(regions)           # enumerate the region these are collapsed into
        
        
        # compute aggregated counts over collapsed region
        match_ <- match(regions, uS)
        m_     <- colSums(m[match_, ])
        nS_    <- sum(nS[match_])
        
        # score collapsed region
        aji_   <- aji*nS_
        ajil_   <- aji_/r
        score_ <- lgamma(aji_)-lgamma(sum(m_)+aji_)-r*lgamma(ajil_)+sum(lgamma(ajil_+m_))
        
        # save context if improve more to score than those already visited
        diff_  <- score_ - sum(scores[match_])
        if (diff_ > diff_top) {
          if (FALSE) cat("iter:", iter, "i: ", i, "x:", x, "\n")
          diff_top <- diff_
          top <- list(i = i,
                      x = x,
                      regions = regions,
                      region = region,
                      match = match_,
                      m = m_,
                      nS = nS_,
                      score = score_)
        }
      }
    }
    
    S_top[S %in% top$regions] <- top$region
    if (all(S_top == S)) {
      break
    } else {
      S <- S_top
      L[[top$i]] <- c(L[[top$i]], top$x)
      uS <- c(uS[-top$match], top$region)
      nS <- c(nS[-top$match], top$nS)
      scores <- c(scores[-top$match], top$score)
      m  <- rbind(m[-top$match, ], top$m)
    }
  }
  return(list(partitioning = S,
              label = L,
              score = sum(scores)))
}



