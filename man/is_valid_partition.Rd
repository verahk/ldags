% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/is_valid_partition.R
\name{is_valid_partition}
\alias{is_valid_partition}
\title{Test a partition for CSI consistency and regularity}
\usage{
is_valid_partition(
  P,
  levels,
  nlev,
  stride = c(1, cumprod(nlev[-length(nlev)])),
  check_regularity = TRUE,
  verbose = FALSE
)
}
\arguments{
\item{P}{(list of integer vectors)
a partition of the outcome space defined by \code{levels}.
enumerating the joint outcomes from \code{0} to \code{prod(lengths(nlev))-1}.}

\item{levels}{(list of integer vectors)
a list with outcomes of each variable.}

\item{check_regularity}{(logical constant)
if TRUE, test if parition is regular, conditional on it beeing CSI-consistent.
if FALSE, only CSI-consistency is tested.}

\item{verbose}{(logical constant)
if TRUE}
}
\value{
a logical constant
}
\description{
CSI-consistency: No part in $P$ includes
Regularity: All levels
}
\examples{
nlev <- c(2, 2)
stride <- c(1, 2)
levels <- lapply(nlev-1, seq.int, from = 0)

# CSI-consistent partition
P <- list(c(0, 1, 3), 2)
is_valid_partition(P, levels, nlev, stride, verbose = T) == TRUE

# not CSI-consistent partition
P <- list(c(0, 3), 2, 1)
is_valid_partition(P, levels, nlev, stride, verbose = T) == FALSE

# CSI-consistent, but not regular
P <- list(c(0, 1), c(2, 3))
is_valid_partition(P, levels, nlev, stride, verbose = T) == FALSE
P <- list(c(0, 2), c(1, 3))
is_valid_partition(P, levels, nlev, stride, verbose = T) == FALSE

# Different cardinality
}
